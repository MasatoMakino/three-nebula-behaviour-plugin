(()=>{"use strict";var __webpack_modules__={690:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(75);\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/controls/OrbitControls.js\nvar OrbitControls = __webpack_require__(12);\n;// CONCATENATED MODULE: ./demoSrc/Common.js\n\n\nclass Common {\n  static initScene() {\n    const scene = new three_module.Scene();\n    return scene;\n  }\n  static initLight(scene) {\n    const ambientLight = new three_module.AmbientLight(0xffffff, 1.0);\n    scene.add(ambientLight);\n    return ambientLight;\n  }\n  static initCamera(scene, W, H, near = 1, far = 400) {\n    const camera = new three_module.PerspectiveCamera(45, W / H, near, far);\n    camera.position.set(0, 0, 100);\n    camera.updateMatrixWorld(false);\n    scene.add(camera);\n    return camera;\n  }\n  static initControl(camera, render) {\n    let domElement;\n    if (render) {\n      domElement = render.domElement;\n    }\n    const control = new OrbitControls/* OrbitControls */.z(camera, domElement);\n    control.update();\n    return control;\n  }\n  static initRenderer(W, H, option) {\n    option = Object.assign({\n      color: 0x000000,\n      id: "webgl-canvas",\n      antialias: true\n    }, option);\n    const renderer = new three_module.WebGLRenderer({\n      canvas: document.getElementById(option.id),\n      antialias: option.antialias\n    });\n    renderer.setClearColor(new three_module.Color(option.color));\n    renderer.setSize(W, H);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    return renderer;\n  }\n  static initHelper(scene) {\n    const axesHelper = new three_module.AxesHelper(30);\n    scene.add(axesHelper);\n  }\n  static render(control, renderer, scene, camera, onBeforeRender) {\n    const rendering = () => {\n      if (onBeforeRender) {\n        onBeforeRender();\n      }\n      control.update();\n      renderer.render(scene, camera);\n      requestAnimationFrame(rendering);\n    };\n    rendering();\n  }\n}\n// EXTERNAL MODULE: ./node_modules/three-nebula/build/esm/index.js + 107 modules\nvar esm = __webpack_require__(335);\n;// CONCATENATED MODULE: ./esm/ColorCanvas.js\nclass ColorCanvas {\n  static getColor(colorCanvas, energy) {\n    const canvas = colorCanvas.canvas;\n    const buffer = colorCanvas.buffer;\n    // @ts-ignore\n    const x = Math.floor(canvas.width * (1.0 - energy));\n    const index = x * 4;\n    return [buffer[index] / 255, buffer[index + 1] / 255, buffer[index + 2] / 255, buffer[index + 3] / 255];\n  }\n  static updateParticleColor(particle, colorCanvas, energy) {\n    const val = this.getColor(colorCanvas, energy);\n    particle.color.r = val[0];\n    particle.color.g = val[1];\n    particle.color.b = val[2];\n    particle.alpha = val[3];\n  }\n}\n;// CONCATENATED MODULE: ./esm/ImageColor.js\n\n\nclass ImageColor extends esm/* Behaviour */.Ty {\n  constructor(url, life, easing, isEnabled = true) {\n    super(life, easing, ImageColor.TYPE, isEnabled);\n    this.reset(url);\n  }\n  reset(url, life, easing) {\n    this.initCanvas(url);\n    life && super.reset(life, easing);\n  }\n  initCanvas(url) {\n    this.colorCanvas = {\n      canvas: document.createElement("canvas"),\n      isLoaded: false\n    };\n    const canvas = this.colorCanvas.canvas;\n    canvas.width = 256;\n    canvas.height = 1;\n    const g = canvas.getContext("2d");\n    const img = new Image();\n    img.onload = () => {\n      this.colorCanvas.isLoaded = true;\n      g.drawImage(img, 0, 0, canvas.width, canvas.height);\n      this.colorCanvas.buffer = g.getImageData(0, 0, canvas.width, canvas.height).data;\n    };\n    img.src = url;\n  }\n  initialize(particle) {\n    //TODO : PR particle.transform type is Object.\n    particle.transform.colorCanvas = this.colorCanvas;\n    particle.useColor = true;\n    particle.useAlpha = true;\n  }\n  mutate(particle, time, index) {\n    //TODO : color.mutate.energize has not index prop.\n    // @ts-ignore\n    this.energize(particle, time);\n    if (particle.transform.colorCanvas.isLoaded) {\n      ColorCanvas.updateParticleColor(particle, particle.transform.colorCanvas,\n      // @ts-ignore\n      this.energy);\n    } else {\n      particle.color.r = 0;\n      particle.color.g = 0;\n      particle.color.b = 0;\n      particle.alpha = 0.0;\n    }\n  }\n}\nImageColor.TYPE = "ImageColor";\n;// CONCATENATED MODULE: ./esm/GradientColor.js\n\n\nclass GradientColor extends esm/* Behaviour */.Ty {\n  constructor(colors, life, easing, isEnabled = true) {\n    super(life, easing, GradientColor.TYPE, isEnabled);\n    this.reset(colors);\n  }\n  reset(colors, life, easing) {\n    this.initCanvas(colors);\n    life && super.reset(life, easing);\n  }\n  initCanvas(colors) {\n    this.gradientCanvas = {\n      canvas: document.createElement("canvas")\n    };\n    const canvas = this.gradientCanvas.canvas;\n    canvas.width = 256;\n    canvas.height = 1;\n    const g = canvas.getContext("2d");\n    const gradient = g.createLinearGradient(0, canvas.height, canvas.width, canvas.height);\n    colors.forEach(color => {\n      gradient.addColorStop(color.offset, color.color);\n    });\n    g.fillStyle = gradient;\n    g.fillRect(0, 0, canvas.width, canvas.height);\n    this.gradientCanvas.buffer = g.getImageData(0, 0, canvas.width, canvas.height).data;\n  }\n  initialize(particle) {\n    particle.transform.gradientCanvas = this.gradientCanvas;\n    particle.useColor = true;\n    particle.useAlpha = true;\n  }\n  mutate(particle, time, index) {\n    // @ts-ignore\n    this.energize(particle, time);\n    ColorCanvas.updateParticleColor(particle, particle.transform.gradientCanvas,\n    // @ts-ignore\n    this.energy);\n  }\n}\nGradientColor.TYPE = "GradientColor";\n;// CONCATENATED MODULE: ./esm/index.js\n\n\n\n;// CONCATENATED MODULE: ./demoSrc/demoImageColor.js\n\n\n\n\nclass Study {\n  constructor() {\n    const W = 640;\n    const H = 480;\n    const scene = Common.initScene();\n    // scene.fog = new Fog(0xffffff, 80, 160);\n    Common.initLight(scene);\n    const camera = Common.initCamera(scene, W, H);\n    const renderer = Common.initRenderer(W, H, {\n      color: 0x444444\n    });\n    const control = Common.initControl(camera, renderer);\n    Common.initHelper(scene);\n    this.initObject(scene);\n    Common.render(control, renderer, scene, camera, () => {\n      if (this.system) {\n        this.system.update();\n      }\n    });\n  }\n  initObject(scene) {\n    this.system = new esm/* System */.xP();\n    this.emitter = new esm/* Emitter */.Q5();\n    const renderer = new esm/* SpriteRenderer */.Tz(scene, three_module);\n    const imageColor = new ImageColor("./img/hue_val.png");\n    document.body.appendChild(imageColor.colorCanvas.canvas);\n    this.range = new esm/* RadialVelocity */.aZ(45, new esm/* Vector3D */.EW(0, 1, 0), 180);\n    this.radius = new esm/* Radius */.wU(6, 12);\n    this.life = new esm/* Life */.Vk(6);\n    this.emitter.setRate(new esm/* Rate */.j8(new esm/* Span */.Dr(4, 16), 0.1)).setInitializers([new esm/* Position */.Ly(new esm/* PointZone */.JU(0, 0)), new esm/* Mass */.HZ(1), this.radius, this.life, this.range]).setBehaviours([imageColor]).emit();\n    this.system.addEmitter(this.emitter).addRenderer(renderer);\n  }\n}\nwindow.onload = () => {\n  const study = new Study();\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///690\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={id:Q,loaded:!1,exports:{}};return __webpack_modules__[Q](F,F.exports,__webpack_require__),F.loaded=!0,F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,U,F,B)=>{if(!U){var s=1/0;for(c=0;c<deferred.length;c++){for(var[U,F,B]=deferred[c],I=!0,e=0;e<U.length;e++)(!1&B||s>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](U[e])))?U.splice(e--,1):(I=!1,B<s&&(s=B));if(I){deferred.splice(c--,1);var n=F();void 0!==n&&(Q=n)}}return Q}B=B||0;for(var c=deferred.length;c>0&&deferred[c-1][2]>B;c--)deferred[c]=deferred[c-1];deferred[c]=[U,F,B]},__webpack_require__.n=Q=>{var U=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(U,{a:U}),U},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(Q){if("object"==typeof window)return window}}(),__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),__webpack_require__.r=Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},__webpack_require__.nmd=Q=>(Q.paths=[],Q.children||(Q.children=[]),Q),(()=>{var Q={95:0};__webpack_require__.O.j=U=>0===Q[U];var U=(U,F)=>{var B,s,[I,e,n]=F,c=0;if(I.some((U=>0!==Q[U]))){for(B in e)__webpack_require__.o(e,B)&&(__webpack_require__.m[B]=e[B]);if(n)var i=n(__webpack_require__)}for(U&&U(F);c<I.length;c++)s=I[c],__webpack_require__.o(Q,s)&&Q[s]&&Q[s][0](),Q[s]=0;return __webpack_require__.O(i)},F=self.webpackChunkthree_nebula_behaviour_plugin=self.webpackChunkthree_nebula_behaviour_plugin||[];F.forEach(U.bind(null,0)),F.push=U.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[736],(()=>__webpack_require__(690)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();